/*
 * This file is generated by jOOQ.
 */
package io.dsub.opendiscogs.jooq.tables.records;


import io.dsub.opendiscogs.jooq.tables.Master;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MasterRecord extends UpdatableRecordImpl<MasterRecord> implements
    Record4<Integer, String, String, Short> {

  private static final long serialVersionUID = 1L;

  /**
   * Create a detached MasterRecord
   */
  public MasterRecord() {
    super(Master.MASTER);
  }

  /**
   * Create a detached, initialised MasterRecord
   */
  public MasterRecord(Integer id, String dataQuality, String title, Short releasedYear) {
    super(Master.MASTER);

    setId(id);
    setDataQuality(dataQuality);
    setTitle(title);
    setReleasedYear(releasedYear);
  }

  /**
   * Create a detached, initialised MasterRecord
   */
  public MasterRecord(io.dsub.opendiscogs.jooq.tables.pojos.Master value) {
    super(Master.MASTER);

    if (value != null) {
      setId(value.getId());
      setDataQuality(value.getDataQuality());
      setTitle(value.getTitle());
      setReleasedYear(value.getReleasedYear());
    }
  }

  /**
   * Getter for <code>public.master.id</code>.
   */
  public Integer getId() {
    return (Integer) get(0);
  }

  /**
   * Setter for <code>public.master.id</code>.
   */
  public MasterRecord setId(Integer value) {
    set(0, value);
    return this;
  }

  /**
   * Getter for <code>public.master.data_quality</code>.
   */
  public String getDataQuality() {
    return (String) get(1);
  }

  /**
   * Setter for <code>public.master.data_quality</code>.
   */
  public MasterRecord setDataQuality(String value) {
    set(1, value);
    return this;
  }

  /**
   * Getter for <code>public.master.title</code>.
   */
  public String getTitle() {
    return (String) get(2);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  /**
   * Setter for <code>public.master.title</code>.
   */
  public MasterRecord setTitle(String value) {
    set(2, value);
    return this;
  }

  // -------------------------------------------------------------------------
  // Record4 type implementation
  // -------------------------------------------------------------------------

  /**
   * Getter for <code>public.master.released_year</code>.
   */
  public Short getReleasedYear() {
    return (Short) get(3);
  }

  /**
   * Setter for <code>public.master.released_year</code>.
   */
  public MasterRecord setReleasedYear(Short value) {
    set(3, value);
    return this;
  }

  @Override
  public Record1<Integer> key() {
    return (Record1) super.key();
  }

  @Override
  public Row4<Integer, String, String, Short> fieldsRow() {
    return (Row4) super.fieldsRow();
  }

  @Override
  public Row4<Integer, String, String, Short> valuesRow() {
    return (Row4) super.valuesRow();
  }

  @Override
  public Field<Integer> field1() {
    return Master.MASTER.ID;
  }

  @Override
  public Field<String> field2() {
    return Master.MASTER.DATA_QUALITY;
  }

  @Override
  public Field<String> field3() {
    return Master.MASTER.TITLE;
  }

  @Override
  public Field<Short> field4() {
    return Master.MASTER.RELEASED_YEAR;
  }

  @Override
  public Integer component1() {
    return getId();
  }

  @Override
  public String component2() {
    return getDataQuality();
  }

  @Override
  public String component3() {
    return getTitle();
  }

  @Override
  public Short component4() {
    return getReleasedYear();
  }

  @Override
  public Integer value1() {
    return getId();
  }

  @Override
  public String value2() {
    return getDataQuality();
  }

  @Override
  public String value3() {
    return getTitle();
  }

  @Override
  public Short value4() {
    return getReleasedYear();
  }

  @Override
  public MasterRecord value1(Integer value) {
    setId(value);
    return this;
  }

  @Override
  public MasterRecord value2(String value) {
    setDataQuality(value);
    return this;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  @Override
  public MasterRecord value3(String value) {
    setTitle(value);
    return this;
  }

  @Override
  public MasterRecord value4(Short value) {
    setReleasedYear(value);
    return this;
  }

  @Override
  public MasterRecord values(Integer value1, String value2, String value3, Short value4) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    return this;
  }
}
