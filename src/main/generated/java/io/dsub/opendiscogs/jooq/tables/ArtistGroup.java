/*
 * This file is generated by jOOQ.
 */
package io.dsub.opendiscogs.jooq.tables;


import io.dsub.opendiscogs.jooq.Indexes;
import io.dsub.opendiscogs.jooq.Keys;
import io.dsub.opendiscogs.jooq.Public;
import io.dsub.opendiscogs.jooq.tables.records.ArtistGroupRecord;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ArtistGroup extends TableImpl<ArtistGroupRecord> {

  /**
   * The reference instance of <code>public.artist_group</code>
   */
  public static final ArtistGroup ARTIST_GROUP = new ArtistGroup();
  private static final long serialVersionUID = 1L;
  /**
   * The column <code>public.artist_group.artist_id</code>.
   */
  public final TableField<ArtistGroupRecord, Integer> ARTIST_ID = createField(DSL.name("artist_id"),
      SQLDataType.INTEGER.nullable(false), this, "");
  /**
   * The column <code>public.artist_group.group_id</code>.
   */
  public final TableField<ArtistGroupRecord, Integer> GROUP_ID = createField(DSL.name("group_id"),
      SQLDataType.INTEGER.nullable(false), this, "");
  /**
   * The column <code>public.artist_group.updated_at</code>. created time
   */
  public final TableField<ArtistGroupRecord, LocalDateTime> UPDATED_AT = createField(
      DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false)
          .defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "created time");
  private transient Artist _fkArtistGroupArtistIdArtist;
  private transient Artist _fkArtistGroupGroupIdArtist;

  private ArtistGroup(Name alias, Table<ArtistGroupRecord> aliased) {
    this(alias, aliased, null);
  }

  private ArtistGroup(Name alias, Table<ArtistGroupRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>public.artist_group</code> table reference
   */
  public ArtistGroup(String alias) {
    this(DSL.name(alias), ARTIST_GROUP);
  }

  /**
   * Create an aliased <code>public.artist_group</code> table reference
   */
  public ArtistGroup(Name alias) {
    this(alias, ARTIST_GROUP);
  }

  /**
   * Create a <code>public.artist_group</code> table reference
   */
  public ArtistGroup() {
    this(DSL.name("artist_group"), null);
  }

  public <O extends Record> ArtistGroup(Table<O> child, ForeignKey<O, ArtistGroupRecord> key) {
    super(child, key, ARTIST_GROUP);
  }

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ArtistGroupRecord> getRecordType() {
    return ArtistGroupRecord.class;
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.asList(Indexes.IDX_ARTIST_GROUP_GROUP_ID_ARTIST_ID);
  }

  @Override
  public UniqueKey<ArtistGroupRecord> getPrimaryKey() {
    return Keys.ARTIST_GROUP_PKEY;
  }

  @Override
  public List<ForeignKey<ArtistGroupRecord, ?>> getReferences() {
    return Arrays.asList(Keys.ARTIST_GROUP__FK_ARTIST_GROUP_ARTIST_ID_ARTIST,
        Keys.ARTIST_GROUP__FK_ARTIST_GROUP_GROUP_ID_ARTIST);
  }

  /**
   * Get the implicit join path to the <code>public.artist</code> table, via the
   * <code>fk_artist_group_artist_id_artist</code> key.
   */
  public Artist fkArtistGroupArtistIdArtist() {
      if (_fkArtistGroupArtistIdArtist == null) {
          _fkArtistGroupArtistIdArtist = new Artist(this,
              Keys.ARTIST_GROUP__FK_ARTIST_GROUP_ARTIST_ID_ARTIST);
      }

    return _fkArtistGroupArtistIdArtist;
  }

  /**
   * Get the implicit join path to the <code>public.artist</code> table, via the
   * <code>fk_artist_group_group_id_artist</code> key.
   */
  public Artist fkArtistGroupGroupIdArtist() {
      if (_fkArtistGroupGroupIdArtist == null) {
          _fkArtistGroupGroupIdArtist = new Artist(this,
              Keys.ARTIST_GROUP__FK_ARTIST_GROUP_GROUP_ID_ARTIST);
      }

    return _fkArtistGroupGroupIdArtist;
  }

  @Override
  public ArtistGroup as(String alias) {
    return new ArtistGroup(DSL.name(alias), this);
  }

  @Override
  public ArtistGroup as(Name alias) {
    return new ArtistGroup(alias, this);
  }

  @Override
  public ArtistGroup as(Table<?> alias) {
    return new ArtistGroup(alias.getQualifiedName(), this);
  }

  /**
   * Rename this table
   */
  @Override
  public ArtistGroup rename(String name) {
    return new ArtistGroup(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public ArtistGroup rename(Name name) {
    return new ArtistGroup(name, null);
  }

  /**
   * Rename this table
   */
  @Override
  public ArtistGroup rename(Table<?> name) {
    return new ArtistGroup(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<Integer, Integer, LocalDateTime> fieldsRow() {
    return (Row3) super.fieldsRow();
  }

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
   */
  public <U> SelectField<U> mapping(
      Function3<? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
    return convertFrom(Records.mapping(from));
  }

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
   */
  public <U> SelectField<U> mapping(Class<U> toType,
      Function3<? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
