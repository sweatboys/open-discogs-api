/*
 * This file is generated by jOOQ.
 */
package io.dsub.opendiscogs.jooq.tables;


import io.dsub.opendiscogs.jooq.Indexes;
import io.dsub.opendiscogs.jooq.Keys;
import io.dsub.opendiscogs.jooq.Public;
import io.dsub.opendiscogs.jooq.tables.records.MasterRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Master extends TableImpl<MasterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.master</code>
     */
    public static final Master MASTER = new Master();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MasterRecord> getRecordType() {
        return MasterRecord.class;
    }

    /**
     * The column <code>public.master.id</code>.
     */
    public final TableField<MasterRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.master.data_quality</code>.
     */
    public final TableField<MasterRecord, String> DATA_QUALITY = createField(DSL.name("data_quality"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.master.title</code>.
     */
    public final TableField<MasterRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>public.master.released_year</code>.
     */
    public final TableField<MasterRecord, Short> RELEASED_YEAR = createField(DSL.name("released_year"), SQLDataType.SMALLINT, this, "");

    private Master(Name alias, Table<MasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private Master(Name alias, Table<MasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.master</code> table reference
     */
    public Master(String alias) {
        this(DSL.name(alias), MASTER);
    }

    /**
     * Create an aliased <code>public.master</code> table reference
     */
    public Master(Name alias) {
        this(alias, MASTER);
    }

    /**
     * Create a <code>public.master</code> table reference
     */
    public Master() {
        this(DSL.name("master"), null);
    }

    public <O extends Record> Master(Table<O> child, ForeignKey<O, MasterRecord> key) {
        super(child, key, MASTER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_MASTER_YEAR);
    }

    @Override
    public UniqueKey<MasterRecord> getPrimaryKey() {
        return Keys.MASTER_PKEY;
    }

    @Override
    public Master as(String alias) {
        return new Master(DSL.name(alias), this);
    }

    @Override
    public Master as(Name alias) {
        return new Master(alias, this);
    }

    @Override
    public Master as(Table<?> alias) {
        return new Master(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Master rename(String name) {
        return new Master(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Master rename(Name name) {
        return new Master(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Master rename(Table<?> name) {
        return new Master(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Short> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super Short, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super Short, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
