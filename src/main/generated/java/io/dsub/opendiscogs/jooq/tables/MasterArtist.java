/*
 * This file is generated by jOOQ.
 */
package io.dsub.opendiscogs.jooq.tables;


import io.dsub.opendiscogs.jooq.Keys;
import io.dsub.opendiscogs.jooq.Public;
import io.dsub.opendiscogs.jooq.tables.records.MasterArtistRecord;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MasterArtist extends TableImpl<MasterArtistRecord> {

  /**
   * The reference instance of <code>public.master_artist</code>
   */
  public static final MasterArtist MASTER_ARTIST = new MasterArtist();
  private static final long serialVersionUID = 1L;
  /**
   * The column <code>public.master_artist.artist_id</code>.
   */
  public final TableField<MasterArtistRecord, Integer> ARTIST_ID = createField(
      DSL.name("artist_id"), SQLDataType.INTEGER.nullable(false), this, "");
  /**
   * The column <code>public.master_artist.master_id</code>.
   */
  public final TableField<MasterArtistRecord, Integer> MASTER_ID = createField(
      DSL.name("master_id"), SQLDataType.INTEGER.nullable(false), this, "");
  /**
   * The column <code>public.master_artist.updated_at</code>. created time
   */
  public final TableField<MasterArtistRecord, LocalDateTime> UPDATED_AT = createField(
      DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false)
          .defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "created time");
  private transient Artist _artist;
  private transient Master _master;

  private MasterArtist(Name alias, Table<MasterArtistRecord> aliased) {
    this(alias, aliased, null);
  }

  private MasterArtist(Name alias, Table<MasterArtistRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>public.master_artist</code> table reference
   */
  public MasterArtist(String alias) {
    this(DSL.name(alias), MASTER_ARTIST);
  }

  /**
   * Create an aliased <code>public.master_artist</code> table reference
   */
  public MasterArtist(Name alias) {
    this(alias, MASTER_ARTIST);
  }

  /**
   * Create a <code>public.master_artist</code> table reference
   */
  public MasterArtist() {
    this(DSL.name("master_artist"), null);
  }

  public <O extends Record> MasterArtist(Table<O> child, ForeignKey<O, MasterArtistRecord> key) {
    super(child, key, MASTER_ARTIST);
  }

  /**
   * The class holding records for this type
   */
  @Override
  public Class<MasterArtistRecord> getRecordType() {
    return MasterArtistRecord.class;
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public UniqueKey<MasterArtistRecord> getPrimaryKey() {
    return Keys.MASTER_ARTIST_PKEY;
  }

  @Override
  public List<ForeignKey<MasterArtistRecord, ?>> getReferences() {
    return Arrays.asList(Keys.MASTER_ARTIST__FK_MASTER_ARTIST_ARTIST_ID_ARTIST,
        Keys.MASTER_ARTIST__FK_MASTER_ARTIST_MASTER_ID_MASTER);
  }

  /**
   * Get the implicit join path to the <code>public.artist</code> table.
   */
  public Artist artist() {
      if (_artist == null) {
          _artist = new Artist(this, Keys.MASTER_ARTIST__FK_MASTER_ARTIST_ARTIST_ID_ARTIST);
      }

    return _artist;
  }

  /**
   * Get the implicit join path to the <code>public.master</code> table.
   */
  public Master master() {
      if (_master == null) {
          _master = new Master(this, Keys.MASTER_ARTIST__FK_MASTER_ARTIST_MASTER_ID_MASTER);
      }

    return _master;
  }

  @Override
  public MasterArtist as(String alias) {
    return new MasterArtist(DSL.name(alias), this);
  }

  @Override
  public MasterArtist as(Name alias) {
    return new MasterArtist(alias, this);
  }

  @Override
  public MasterArtist as(Table<?> alias) {
    return new MasterArtist(alias.getQualifiedName(), this);
  }

  /**
   * Rename this table
   */
  @Override
  public MasterArtist rename(String name) {
    return new MasterArtist(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public MasterArtist rename(Name name) {
    return new MasterArtist(name, null);
  }

  /**
   * Rename this table
   */
  @Override
  public MasterArtist rename(Table<?> name) {
    return new MasterArtist(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<Integer, Integer, LocalDateTime> fieldsRow() {
    return (Row3) super.fieldsRow();
  }

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
   */
  public <U> SelectField<U> mapping(
      Function3<? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
    return convertFrom(Records.mapping(from));
  }

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
   */
  public <U> SelectField<U> mapping(Class<U> toType,
      Function3<? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
