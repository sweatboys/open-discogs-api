/*
 * This file is generated by jOOQ.
 */
package io.dsub.opendiscogs.jooq.tables;


import io.dsub.opendiscogs.jooq.Keys;
import io.dsub.opendiscogs.jooq.Public;
import io.dsub.opendiscogs.jooq.tables.records.ReleaseStyleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReleaseStyle extends TableImpl<ReleaseStyleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.release_style</code>
     */
    public static final ReleaseStyle RELEASE_STYLE = new ReleaseStyle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReleaseStyleRecord> getRecordType() {
        return ReleaseStyleRecord.class;
    }

    /**
     * The column <code>public.release_style.release_id</code>.
     */
    public final TableField<ReleaseStyleRecord, Integer> RELEASE_ID = createField(DSL.name("release_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.release_style.style_id</code>.
     */
    public final TableField<ReleaseStyleRecord, Integer> STYLE_ID = createField(DSL.name("style_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.release_style.updated_at</code>. created time
     */
    public final TableField<ReleaseStyleRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "created time");

    private ReleaseStyle(Name alias, Table<ReleaseStyleRecord> aliased) {
        this(alias, aliased, null);
    }

    private ReleaseStyle(Name alias, Table<ReleaseStyleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.release_style</code> table reference
     */
    public ReleaseStyle(String alias) {
        this(DSL.name(alias), RELEASE_STYLE);
    }

    /**
     * Create an aliased <code>public.release_style</code> table reference
     */
    public ReleaseStyle(Name alias) {
        this(alias, RELEASE_STYLE);
    }

    /**
     * Create a <code>public.release_style</code> table reference
     */
    public ReleaseStyle() {
        this(DSL.name("release_style"), null);
    }

    public <O extends Record> ReleaseStyle(Table<O> child, ForeignKey<O, ReleaseStyleRecord> key) {
        super(child, key, RELEASE_STYLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ReleaseStyleRecord> getPrimaryKey() {
        return Keys.RELEASE_STYLE_PKEY;
    }

    @Override
    public List<ForeignKey<ReleaseStyleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RELEASE_STYLE__FK_RELEASE_STYLE_RELEASE_ID_RELEASE, Keys.RELEASE_STYLE__FK_RELEASE_STYLE_STYLE_ID_STYLE);
    }

    private transient Release _release;
    private transient Style _style;

    /**
     * Get the implicit join path to the <code>public.release</code> table.
     */
    public Release release() {
        if (_release == null)
            _release = new Release(this, Keys.RELEASE_STYLE__FK_RELEASE_STYLE_RELEASE_ID_RELEASE);

        return _release;
    }

    /**
     * Get the implicit join path to the <code>public.style</code> table.
     */
    public Style style() {
        if (_style == null)
            _style = new Style(this, Keys.RELEASE_STYLE__FK_RELEASE_STYLE_STYLE_ID_STYLE);

        return _style;
    }

    @Override
    public ReleaseStyle as(String alias) {
        return new ReleaseStyle(DSL.name(alias), this);
    }

    @Override
    public ReleaseStyle as(Name alias) {
        return new ReleaseStyle(alias, this);
    }

    @Override
    public ReleaseStyle as(Table<?> alias) {
        return new ReleaseStyle(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReleaseStyle rename(String name) {
        return new ReleaseStyle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReleaseStyle rename(Name name) {
        return new ReleaseStyle(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReleaseStyle rename(Table<?> name) {
        return new ReleaseStyle(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
