/*
 * This file is generated by jOOQ.
 */
package io.dsub.opendiscogs.jooq.tables;


import io.dsub.opendiscogs.jooq.Keys;
import io.dsub.opendiscogs.jooq.Public;
import io.dsub.opendiscogs.jooq.tables.records.MasterStyleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MasterStyle extends TableImpl<MasterStyleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.master_style</code>
     */
    public static final MasterStyle MASTER_STYLE = new MasterStyle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MasterStyleRecord> getRecordType() {
        return MasterStyleRecord.class;
    }

    /**
     * The column <code>public.master_style.master_id</code>.
     */
    public final TableField<MasterStyleRecord, Integer> MASTER_ID = createField(DSL.name("master_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.master_style.style_id</code>.
     */
    public final TableField<MasterStyleRecord, Integer> STYLE_ID = createField(DSL.name("style_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.master_style.updated_at</code>. created time
     */
    public final TableField<MasterStyleRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "created time");

    private MasterStyle(Name alias, Table<MasterStyleRecord> aliased) {
        this(alias, aliased, null);
    }

    private MasterStyle(Name alias, Table<MasterStyleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.master_style</code> table reference
     */
    public MasterStyle(String alias) {
        this(DSL.name(alias), MASTER_STYLE);
    }

    /**
     * Create an aliased <code>public.master_style</code> table reference
     */
    public MasterStyle(Name alias) {
        this(alias, MASTER_STYLE);
    }

    /**
     * Create a <code>public.master_style</code> table reference
     */
    public MasterStyle() {
        this(DSL.name("master_style"), null);
    }

    public <O extends Record> MasterStyle(Table<O> child, ForeignKey<O, MasterStyleRecord> key) {
        super(child, key, MASTER_STYLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<MasterStyleRecord> getPrimaryKey() {
        return Keys.MASTER_STYLE_PKEY;
    }

    @Override
    public List<ForeignKey<MasterStyleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MASTER_STYLE__FK_MASTER_STYLE_MASTER_ID_MASTER, Keys.MASTER_STYLE__FK_MASTER_STYLE_STYLE_ID_STYLE);
    }

    private transient Master _master;
    private transient Style _style;

    /**
     * Get the implicit join path to the <code>public.master</code> table.
     */
    public Master master() {
        if (_master == null)
            _master = new Master(this, Keys.MASTER_STYLE__FK_MASTER_STYLE_MASTER_ID_MASTER);

        return _master;
    }

    /**
     * Get the implicit join path to the <code>public.style</code> table.
     */
    public Style style() {
        if (_style == null)
            _style = new Style(this, Keys.MASTER_STYLE__FK_MASTER_STYLE_STYLE_ID_STYLE);

        return _style;
    }

    @Override
    public MasterStyle as(String alias) {
        return new MasterStyle(DSL.name(alias), this);
    }

    @Override
    public MasterStyle as(Name alias) {
        return new MasterStyle(alias, this);
    }

    @Override
    public MasterStyle as(Table<?> alias) {
        return new MasterStyle(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MasterStyle rename(String name) {
        return new MasterStyle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MasterStyle rename(Name name) {
        return new MasterStyle(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MasterStyle rename(Table<?> name) {
        return new MasterStyle(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
