/*
 * This file is generated by jOOQ.
 */
package io.dsub.opendiscogs.jooq;


import io.dsub.opendiscogs.jooq.tables.Artist;
import io.dsub.opendiscogs.jooq.tables.ArtistAlias;
import io.dsub.opendiscogs.jooq.tables.ArtistGroup;
import io.dsub.opendiscogs.jooq.tables.ArtistNameVariation;
import io.dsub.opendiscogs.jooq.tables.ArtistUrl;
import io.dsub.opendiscogs.jooq.tables.Data;
import io.dsub.opendiscogs.jooq.tables.Genre;
import io.dsub.opendiscogs.jooq.tables.Label;
import io.dsub.opendiscogs.jooq.tables.LabelRelease;
import io.dsub.opendiscogs.jooq.tables.LabelUrl;
import io.dsub.opendiscogs.jooq.tables.Master;
import io.dsub.opendiscogs.jooq.tables.MasterArtist;
import io.dsub.opendiscogs.jooq.tables.MasterGenre;
import io.dsub.opendiscogs.jooq.tables.MasterStyle;
import io.dsub.opendiscogs.jooq.tables.MasterVideo;
import io.dsub.opendiscogs.jooq.tables.Release;
import io.dsub.opendiscogs.jooq.tables.ReleaseArtist;
import io.dsub.opendiscogs.jooq.tables.ReleaseContract;
import io.dsub.opendiscogs.jooq.tables.ReleaseCreditedArtist;
import io.dsub.opendiscogs.jooq.tables.ReleaseFormat;
import io.dsub.opendiscogs.jooq.tables.ReleaseGenre;
import io.dsub.opendiscogs.jooq.tables.ReleaseIdentifier;
import io.dsub.opendiscogs.jooq.tables.ReleaseImage;
import io.dsub.opendiscogs.jooq.tables.ReleaseStyle;
import io.dsub.opendiscogs.jooq.tables.ReleaseTrack;
import io.dsub.opendiscogs.jooq.tables.ReleaseVideo;
import io.dsub.opendiscogs.jooq.tables.Style;
import io.dsub.opendiscogs.jooq.tables.records.ArtistAliasRecord;
import io.dsub.opendiscogs.jooq.tables.records.ArtistGroupRecord;
import io.dsub.opendiscogs.jooq.tables.records.ArtistNameVariationRecord;
import io.dsub.opendiscogs.jooq.tables.records.ArtistRecord;
import io.dsub.opendiscogs.jooq.tables.records.ArtistUrlRecord;
import io.dsub.opendiscogs.jooq.tables.records.DataRecord;
import io.dsub.opendiscogs.jooq.tables.records.GenreRecord;
import io.dsub.opendiscogs.jooq.tables.records.LabelRecord;
import io.dsub.opendiscogs.jooq.tables.records.LabelReleaseRecord;
import io.dsub.opendiscogs.jooq.tables.records.LabelUrlRecord;
import io.dsub.opendiscogs.jooq.tables.records.MasterArtistRecord;
import io.dsub.opendiscogs.jooq.tables.records.MasterGenreRecord;
import io.dsub.opendiscogs.jooq.tables.records.MasterRecord;
import io.dsub.opendiscogs.jooq.tables.records.MasterStyleRecord;
import io.dsub.opendiscogs.jooq.tables.records.MasterVideoRecord;
import io.dsub.opendiscogs.jooq.tables.records.ReleaseArtistRecord;
import io.dsub.opendiscogs.jooq.tables.records.ReleaseContractRecord;
import io.dsub.opendiscogs.jooq.tables.records.ReleaseCreditedArtistRecord;
import io.dsub.opendiscogs.jooq.tables.records.ReleaseFormatRecord;
import io.dsub.opendiscogs.jooq.tables.records.ReleaseGenreRecord;
import io.dsub.opendiscogs.jooq.tables.records.ReleaseIdentifierRecord;
import io.dsub.opendiscogs.jooq.tables.records.ReleaseImageRecord;
import io.dsub.opendiscogs.jooq.tables.records.ReleaseRecord;
import io.dsub.opendiscogs.jooq.tables.records.ReleaseStyleRecord;
import io.dsub.opendiscogs.jooq.tables.records.ReleaseTrackRecord;
import io.dsub.opendiscogs.jooq.tables.records.ReleaseVideoRecord;
import io.dsub.opendiscogs.jooq.tables.records.StyleRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ArtistRecord> ARTIST_PKEY = Internal.createUniqueKey(Artist.ARTIST, DSL.name("artist_pkey"), new TableField[] { Artist.ARTIST.ID }, true);
    public static final UniqueKey<ArtistAliasRecord> ARTIST_ALIAS_PKEY = Internal.createUniqueKey(ArtistAlias.ARTIST_ALIAS, DSL.name("artist_alias_pkey"), new TableField[] { ArtistAlias.ARTIST_ALIAS.ARTIST_ID, ArtistAlias.ARTIST_ALIAS.ALIAS_ID }, true);
    public static final UniqueKey<ArtistGroupRecord> ARTIST_GROUP_PKEY = Internal.createUniqueKey(ArtistGroup.ARTIST_GROUP, DSL.name("artist_group_pkey"), new TableField[] { ArtistGroup.ARTIST_GROUP.ARTIST_ID, ArtistGroup.ARTIST_GROUP.GROUP_ID }, true);
    public static final UniqueKey<ArtistNameVariationRecord> ARTIST_NAME_VARIATION_PKEY = Internal.createUniqueKey(ArtistNameVariation.ARTIST_NAME_VARIATION, DSL.name("artist_name_variation_pkey"), new TableField[] { ArtistNameVariation.ARTIST_NAME_VARIATION.ARTIST_ID, ArtistNameVariation.ARTIST_NAME_VARIATION.NAME_VARIATION_HASH }, true);
    public static final UniqueKey<ArtistUrlRecord> ARTIST_URL_PKEY = Internal.createUniqueKey(ArtistUrl.ARTIST_URL, DSL.name("artist_url_pkey"), new TableField[] { ArtistUrl.ARTIST_URL.ARTIST_ID, ArtistUrl.ARTIST_URL.URL_HASH }, true);
    public static final UniqueKey<DataRecord> DATA_PKEY = Internal.createUniqueKey(Data.DATA, DSL.name("data_pkey"), new TableField[] { Data.DATA.ETAG }, true);
    public static final UniqueKey<GenreRecord> GENRE_NAME_KEY = Internal.createUniqueKey(Genre.GENRE, DSL.name("genre_name_key"), new TableField[] { Genre.GENRE.NAME }, true);
    public static final UniqueKey<GenreRecord> GENRE_PKEY = Internal.createUniqueKey(Genre.GENRE, DSL.name("genre_pkey"), new TableField[] { Genre.GENRE.ID }, true);
    public static final UniqueKey<LabelRecord> LABEL_PKEY = Internal.createUniqueKey(Label.LABEL, DSL.name("label_pkey"), new TableField[] { Label.LABEL.ID }, true);
    public static final UniqueKey<LabelReleaseRecord> LABEL_RELEASE_PKEY = Internal.createUniqueKey(LabelRelease.LABEL_RELEASE, DSL.name("label_release_pkey"), new TableField[] { LabelRelease.LABEL_RELEASE.LABEL_ID, LabelRelease.LABEL_RELEASE.RELEASE_ID }, true);
    public static final UniqueKey<LabelUrlRecord> LABEL_URL_PKEY = Internal.createUniqueKey(LabelUrl.LABEL_URL, DSL.name("label_url_pkey"), new TableField[] { LabelUrl.LABEL_URL.LABEL_ID, LabelUrl.LABEL_URL.URL_HASH }, true);
    public static final UniqueKey<MasterRecord> MASTER_PKEY = Internal.createUniqueKey(Master.MASTER, DSL.name("master_pkey"), new TableField[] { Master.MASTER.ID }, true);
    public static final UniqueKey<MasterArtistRecord> MASTER_ARTIST_PKEY = Internal.createUniqueKey(MasterArtist.MASTER_ARTIST, DSL.name("master_artist_pkey"), new TableField[] { MasterArtist.MASTER_ARTIST.ARTIST_ID, MasterArtist.MASTER_ARTIST.MASTER_ID }, true);
    public static final UniqueKey<MasterGenreRecord> MASTER_GENRE_PKEY = Internal.createUniqueKey(MasterGenre.MASTER_GENRE, DSL.name("master_genre_pkey"), new TableField[] { MasterGenre.MASTER_GENRE.MASTER_ID, MasterGenre.MASTER_GENRE.GENRE_ID }, true);
    public static final UniqueKey<MasterStyleRecord> MASTER_STYLE_PKEY = Internal.createUniqueKey(MasterStyle.MASTER_STYLE, DSL.name("master_style_pkey"), new TableField[] { MasterStyle.MASTER_STYLE.MASTER_ID, MasterStyle.MASTER_STYLE.STYLE_ID }, true);
    public static final UniqueKey<MasterVideoRecord> MASTER_VIDEO_PKEY = Internal.createUniqueKey(MasterVideo.MASTER_VIDEO, DSL.name("master_video_pkey"), new TableField[] { MasterVideo.MASTER_VIDEO.MASTER_ID, MasterVideo.MASTER_VIDEO.URL_HASH }, true);
    public static final UniqueKey<ReleaseRecord> RELEASE_PKEY = Internal.createUniqueKey(Release.RELEASE, DSL.name("release_pkey"), new TableField[] { Release.RELEASE.ID }, true);
    public static final UniqueKey<ReleaseArtistRecord> RELEASE_ARTIST_PKEY = Internal.createUniqueKey(ReleaseArtist.RELEASE_ARTIST, DSL.name("release_artist_pkey"), new TableField[] { ReleaseArtist.RELEASE_ARTIST.RELEASE_ID, ReleaseArtist.RELEASE_ARTIST.ARTIST_ID }, true);
    public static final UniqueKey<ReleaseContractRecord> RELEASE_CONTRACT_PKEY = Internal.createUniqueKey(ReleaseContract.RELEASE_CONTRACT, DSL.name("release_contract_pkey"), new TableField[] { ReleaseContract.RELEASE_CONTRACT.RELEASE_ID, ReleaseContract.RELEASE_CONTRACT.LABEL_ID, ReleaseContract.RELEASE_CONTRACT.CONTRACT_HASH }, true);
    public static final UniqueKey<ReleaseCreditedArtistRecord> RELEASE_CREDITED_ARTIST_PKEY = Internal.createUniqueKey(ReleaseCreditedArtist.RELEASE_CREDITED_ARTIST, DSL.name("release_credited_artist_pkey"), new TableField[] { ReleaseCreditedArtist.RELEASE_CREDITED_ARTIST.RELEASE_ID, ReleaseCreditedArtist.RELEASE_CREDITED_ARTIST.ARTIST_ID, ReleaseCreditedArtist.RELEASE_CREDITED_ARTIST.ROLE_HASH }, true);
    public static final UniqueKey<ReleaseFormatRecord> RELEASE_FORMAT_PKEY = Internal.createUniqueKey(ReleaseFormat.RELEASE_FORMAT, DSL.name("release_format_pkey"), new TableField[] { ReleaseFormat.RELEASE_FORMAT.RELEASE_ID, ReleaseFormat.RELEASE_FORMAT.FORMAT_HASH }, true);
    public static final UniqueKey<ReleaseGenreRecord> RELEASE_GENRE_PKEY = Internal.createUniqueKey(ReleaseGenre.RELEASE_GENRE, DSL.name("release_genre_pkey"), new TableField[] { ReleaseGenre.RELEASE_GENRE.RELEASE_ID, ReleaseGenre.RELEASE_GENRE.GENRE_ID }, true);
    public static final UniqueKey<ReleaseIdentifierRecord> RELEASE_IDENTIFIER_PKEY = Internal.createUniqueKey(ReleaseIdentifier.RELEASE_IDENTIFIER, DSL.name("release_identifier_pkey"), new TableField[] { ReleaseIdentifier.RELEASE_IDENTIFIER.RELEASE_ID, ReleaseIdentifier.RELEASE_IDENTIFIER.IDENTIFIER_HASH }, true);
    public static final UniqueKey<ReleaseImageRecord> RELEASE_IMAGE_PKEY = Internal.createUniqueKey(ReleaseImage.RELEASE_IMAGE, DSL.name("release_image_pkey"), new TableField[] { ReleaseImage.RELEASE_IMAGE.RELEASE_ID, ReleaseImage.RELEASE_IMAGE.URL_HASH }, true);
    public static final UniqueKey<ReleaseStyleRecord> RELEASE_STYLE_PKEY = Internal.createUniqueKey(ReleaseStyle.RELEASE_STYLE, DSL.name("release_style_pkey"), new TableField[] { ReleaseStyle.RELEASE_STYLE.RELEASE_ID, ReleaseStyle.RELEASE_STYLE.STYLE_ID }, true);
    public static final UniqueKey<ReleaseTrackRecord> RELEASE_TRACK_PKEY = Internal.createUniqueKey(ReleaseTrack.RELEASE_TRACK, DSL.name("release_track_pkey"), new TableField[] { ReleaseTrack.RELEASE_TRACK.RELEASE_ID, ReleaseTrack.RELEASE_TRACK.TITLE_HASH }, true);
    public static final UniqueKey<ReleaseVideoRecord> RELEASE_VIDEO_PKEY = Internal.createUniqueKey(ReleaseVideo.RELEASE_VIDEO, DSL.name("release_video_pkey"), new TableField[] { ReleaseVideo.RELEASE_VIDEO.RELEASE_ID, ReleaseVideo.RELEASE_VIDEO.URL_HASH }, true);
    public static final UniqueKey<StyleRecord> STYLE_NAME_KEY = Internal.createUniqueKey(Style.STYLE, DSL.name("style_name_key"), new TableField[] { Style.STYLE.NAME }, true);
    public static final UniqueKey<StyleRecord> STYLE_PKEY = Internal.createUniqueKey(Style.STYLE, DSL.name("style_pkey"), new TableField[] { Style.STYLE.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ArtistAliasRecord, ArtistRecord> ARTIST_ALIAS__FK_ARTIST_ALIAS_ALIAS_ID_ARTIST = Internal.createForeignKey(ArtistAlias.ARTIST_ALIAS, DSL.name("fk_artist_alias_alias_id_artist"), new TableField[] { ArtistAlias.ARTIST_ALIAS.ALIAS_ID }, Keys.ARTIST_PKEY, new TableField[] { Artist.ARTIST.ID }, true);
    public static final ForeignKey<ArtistAliasRecord, ArtistRecord> ARTIST_ALIAS__FK_ARTIST_ALIAS_ARTIST_ID_ARTIST = Internal.createForeignKey(ArtistAlias.ARTIST_ALIAS, DSL.name("fk_artist_alias_artist_id_artist"), new TableField[] { ArtistAlias.ARTIST_ALIAS.ARTIST_ID }, Keys.ARTIST_PKEY, new TableField[] { Artist.ARTIST.ID }, true);
    public static final ForeignKey<ArtistGroupRecord, ArtistRecord> ARTIST_GROUP__FK_ARTIST_GROUP_ARTIST_ID_ARTIST = Internal.createForeignKey(ArtistGroup.ARTIST_GROUP, DSL.name("fk_artist_group_artist_id_artist"), new TableField[] { ArtistGroup.ARTIST_GROUP.ARTIST_ID }, Keys.ARTIST_PKEY, new TableField[] { Artist.ARTIST.ID }, true);
    public static final ForeignKey<ArtistGroupRecord, ArtistRecord> ARTIST_GROUP__FK_ARTIST_GROUP_GROUP_ID_ARTIST = Internal.createForeignKey(ArtistGroup.ARTIST_GROUP, DSL.name("fk_artist_group_group_id_artist"), new TableField[] { ArtistGroup.ARTIST_GROUP.GROUP_ID }, Keys.ARTIST_PKEY, new TableField[] { Artist.ARTIST.ID }, true);
    public static final ForeignKey<ArtistNameVariationRecord, ArtistRecord> ARTIST_NAME_VARIATION__FK_ARTIST_NAME_VARIATION_ARTIST_ID_ARTIST = Internal.createForeignKey(ArtistNameVariation.ARTIST_NAME_VARIATION, DSL.name("fk_artist_name_variation_artist_id_artist"), new TableField[] { ArtistNameVariation.ARTIST_NAME_VARIATION.ARTIST_ID }, Keys.ARTIST_PKEY, new TableField[] { Artist.ARTIST.ID }, true);
    public static final ForeignKey<ArtistUrlRecord, ArtistRecord> ARTIST_URL__FK_ARTIST_URL_ARTIST_ID_ARTIST = Internal.createForeignKey(ArtistUrl.ARTIST_URL, DSL.name("fk_artist_url_artist_id_artist"), new TableField[] { ArtistUrl.ARTIST_URL.ARTIST_ID }, Keys.ARTIST_PKEY, new TableField[] { Artist.ARTIST.ID }, true);
    public static final ForeignKey<LabelRecord, LabelRecord> LABEL__FK_LABEL_PARENT_ID_LABEL_ID = Internal.createForeignKey(Label.LABEL, DSL.name("fk_label_parent_id_label_id"), new TableField[] { Label.LABEL.PARENT_ID }, Keys.LABEL_PKEY, new TableField[] { Label.LABEL.ID }, true);
    public static final ForeignKey<LabelReleaseRecord, LabelRecord> LABEL_RELEASE__FK_LABEL_RELEASE_LABEL_ID_LABEL = Internal.createForeignKey(LabelRelease.LABEL_RELEASE, DSL.name("fk_label_release_label_id_label"), new TableField[] { LabelRelease.LABEL_RELEASE.LABEL_ID }, Keys.LABEL_PKEY, new TableField[] { Label.LABEL.ID }, true);
    public static final ForeignKey<LabelReleaseRecord, ReleaseRecord> LABEL_RELEASE__FK_LABEL_RELEASE_RELEASE_ID_RELEASE = Internal.createForeignKey(LabelRelease.LABEL_RELEASE, DSL.name("fk_label_release_release_id_release"), new TableField[] { LabelRelease.LABEL_RELEASE.RELEASE_ID }, Keys.RELEASE_PKEY, new TableField[] { Release.RELEASE.ID }, true);
    public static final ForeignKey<LabelUrlRecord, LabelRecord> LABEL_URL__FK_LABEL_URL_LABEL_ID_LABEL = Internal.createForeignKey(LabelUrl.LABEL_URL, DSL.name("fk_label_url_label_id_label"), new TableField[] { LabelUrl.LABEL_URL.LABEL_ID }, Keys.LABEL_PKEY, new TableField[] { Label.LABEL.ID }, true);
    public static final ForeignKey<MasterArtistRecord, ArtistRecord> MASTER_ARTIST__FK_MASTER_ARTIST_ARTIST_ID_ARTIST = Internal.createForeignKey(MasterArtist.MASTER_ARTIST, DSL.name("fk_master_artist_artist_id_artist"), new TableField[] { MasterArtist.MASTER_ARTIST.ARTIST_ID }, Keys.ARTIST_PKEY, new TableField[] { Artist.ARTIST.ID }, true);
    public static final ForeignKey<MasterArtistRecord, MasterRecord> MASTER_ARTIST__FK_MASTER_ARTIST_MASTER_ID_MASTER = Internal.createForeignKey(MasterArtist.MASTER_ARTIST, DSL.name("fk_master_artist_master_id_master"), new TableField[] { MasterArtist.MASTER_ARTIST.MASTER_ID }, Keys.MASTER_PKEY, new TableField[] { Master.MASTER.ID }, true);
    public static final ForeignKey<MasterGenreRecord, GenreRecord> MASTER_GENRE__FK_MASTER_GENRE_GENRE_ID_GENRE = Internal.createForeignKey(MasterGenre.MASTER_GENRE, DSL.name("fk_master_genre_genre_id_genre"), new TableField[] { MasterGenre.MASTER_GENRE.GENRE_ID }, Keys.GENRE_PKEY, new TableField[] { Genre.GENRE.ID }, true);
    public static final ForeignKey<MasterGenreRecord, MasterRecord> MASTER_GENRE__FK_MASTER_GENRE_MASTER_ID_MASTER = Internal.createForeignKey(MasterGenre.MASTER_GENRE, DSL.name("fk_master_genre_master_id_master"), new TableField[] { MasterGenre.MASTER_GENRE.MASTER_ID }, Keys.MASTER_PKEY, new TableField[] { Master.MASTER.ID }, true);
    public static final ForeignKey<MasterStyleRecord, MasterRecord> MASTER_STYLE__FK_MASTER_STYLE_MASTER_ID_MASTER = Internal.createForeignKey(MasterStyle.MASTER_STYLE, DSL.name("fk_master_style_master_id_master"), new TableField[] { MasterStyle.MASTER_STYLE.MASTER_ID }, Keys.MASTER_PKEY, new TableField[] { Master.MASTER.ID }, true);
    public static final ForeignKey<MasterStyleRecord, StyleRecord> MASTER_STYLE__FK_MASTER_STYLE_STYLE_ID_STYLE = Internal.createForeignKey(MasterStyle.MASTER_STYLE, DSL.name("fk_master_style_style_id_style"), new TableField[] { MasterStyle.MASTER_STYLE.STYLE_ID }, Keys.STYLE_PKEY, new TableField[] { Style.STYLE.ID }, true);
    public static final ForeignKey<MasterVideoRecord, MasterRecord> MASTER_VIDEO__FK_MASTER_VIDEO_MASTER_ID_MASTER = Internal.createForeignKey(MasterVideo.MASTER_VIDEO, DSL.name("fk_master_video_master_id_master"), new TableField[] { MasterVideo.MASTER_VIDEO.MASTER_ID }, Keys.MASTER_PKEY, new TableField[] { Master.MASTER.ID }, true);
    public static final ForeignKey<ReleaseRecord, MasterRecord> RELEASE__FK_RELEASE_MASTER_ID_MASTER = Internal.createForeignKey(Release.RELEASE, DSL.name("fk_release_master_id_master"), new TableField[] { Release.RELEASE.MASTER_ID }, Keys.MASTER_PKEY, new TableField[] { Master.MASTER.ID }, true);
    public static final ForeignKey<ReleaseArtistRecord, ArtistRecord> RELEASE_ARTIST__FK_RELEASE_ARTIST_ARTIST_ID_ARTIST = Internal.createForeignKey(ReleaseArtist.RELEASE_ARTIST, DSL.name("fk_release_artist_artist_id_artist"), new TableField[] { ReleaseArtist.RELEASE_ARTIST.ARTIST_ID }, Keys.ARTIST_PKEY, new TableField[] { Artist.ARTIST.ID }, true);
    public static final ForeignKey<ReleaseArtistRecord, ReleaseRecord> RELEASE_ARTIST__FK_RELEASE_ARTIST_RELEASE_ID_RELEASE = Internal.createForeignKey(ReleaseArtist.RELEASE_ARTIST, DSL.name("fk_release_artist_release_id_release"), new TableField[] { ReleaseArtist.RELEASE_ARTIST.RELEASE_ID }, Keys.RELEASE_PKEY, new TableField[] { Release.RELEASE.ID }, true);
    public static final ForeignKey<ReleaseContractRecord, LabelRecord> RELEASE_CONTRACT__FK_RELEASE_CONTRACT_LABEL_ID_LABEL = Internal.createForeignKey(ReleaseContract.RELEASE_CONTRACT, DSL.name("fk_release_contract_label_id_label"), new TableField[] { ReleaseContract.RELEASE_CONTRACT.LABEL_ID }, Keys.LABEL_PKEY, new TableField[] { Label.LABEL.ID }, true);
    public static final ForeignKey<ReleaseContractRecord, ReleaseRecord> RELEASE_CONTRACT__FK_RELEASE_CONTRACT_RELEASE_ID_RELEASE = Internal.createForeignKey(ReleaseContract.RELEASE_CONTRACT, DSL.name("fk_release_contract_release_id_release"), new TableField[] { ReleaseContract.RELEASE_CONTRACT.RELEASE_ID }, Keys.RELEASE_PKEY, new TableField[] { Release.RELEASE.ID }, true);
    public static final ForeignKey<ReleaseCreditedArtistRecord, ArtistRecord> RELEASE_CREDITED_ARTIST__FK_RELEASE_CREDITED_ARTIST_ARTIST_ID_ARTIST = Internal.createForeignKey(ReleaseCreditedArtist.RELEASE_CREDITED_ARTIST, DSL.name("fk_release_credited_artist_artist_id_artist"), new TableField[] { ReleaseCreditedArtist.RELEASE_CREDITED_ARTIST.ARTIST_ID }, Keys.ARTIST_PKEY, new TableField[] { Artist.ARTIST.ID }, true);
    public static final ForeignKey<ReleaseCreditedArtistRecord, ReleaseRecord> RELEASE_CREDITED_ARTIST__FK_RELEASE_CREDITED_ARTIST_RELEASE_ID_RELEASE = Internal.createForeignKey(ReleaseCreditedArtist.RELEASE_CREDITED_ARTIST, DSL.name("fk_release_credited_artist_release_id_release"), new TableField[] { ReleaseCreditedArtist.RELEASE_CREDITED_ARTIST.RELEASE_ID }, Keys.RELEASE_PKEY, new TableField[] { Release.RELEASE.ID }, true);
    public static final ForeignKey<ReleaseFormatRecord, ReleaseRecord> RELEASE_FORMAT__FK_RELEASE_FORMAT_RELEASE_ID_RELEASE = Internal.createForeignKey(ReleaseFormat.RELEASE_FORMAT, DSL.name("fk_release_format_release_id_release"), new TableField[] { ReleaseFormat.RELEASE_FORMAT.RELEASE_ID }, Keys.RELEASE_PKEY, new TableField[] { Release.RELEASE.ID }, true);
    public static final ForeignKey<ReleaseGenreRecord, GenreRecord> RELEASE_GENRE__FK_RELEASE_GENRE_GENRE_ID_GENRE = Internal.createForeignKey(ReleaseGenre.RELEASE_GENRE, DSL.name("fk_release_genre_genre_id_genre"), new TableField[] { ReleaseGenre.RELEASE_GENRE.GENRE_ID }, Keys.GENRE_PKEY, new TableField[] { Genre.GENRE.ID }, true);
    public static final ForeignKey<ReleaseGenreRecord, ReleaseRecord> RELEASE_GENRE__FK_RELEASE_GENRE_RELEASE_ID_RELEASE = Internal.createForeignKey(ReleaseGenre.RELEASE_GENRE, DSL.name("fk_release_genre_release_id_release"), new TableField[] { ReleaseGenre.RELEASE_GENRE.RELEASE_ID }, Keys.RELEASE_PKEY, new TableField[] { Release.RELEASE.ID }, true);
    public static final ForeignKey<ReleaseIdentifierRecord, ReleaseRecord> RELEASE_IDENTIFIER__FK_RELEASE_IDENTIFIER_RELEASE_ID_RELEASE = Internal.createForeignKey(ReleaseIdentifier.RELEASE_IDENTIFIER, DSL.name("fk_release_identifier_release_id_release"), new TableField[] { ReleaseIdentifier.RELEASE_IDENTIFIER.RELEASE_ID }, Keys.RELEASE_PKEY, new TableField[] { Release.RELEASE.ID }, true);
    public static final ForeignKey<ReleaseImageRecord, ReleaseRecord> RELEASE_IMAGE__FK_RELEASE_IMAGE_RELEASE_ID_RELEASE = Internal.createForeignKey(ReleaseImage.RELEASE_IMAGE, DSL.name("fk_release_image_release_id_release"), new TableField[] { ReleaseImage.RELEASE_IMAGE.RELEASE_ID }, Keys.RELEASE_PKEY, new TableField[] { Release.RELEASE.ID }, true);
    public static final ForeignKey<ReleaseStyleRecord, ReleaseRecord> RELEASE_STYLE__FK_RELEASE_STYLE_RELEASE_ID_RELEASE = Internal.createForeignKey(ReleaseStyle.RELEASE_STYLE, DSL.name("fk_release_style_release_id_release"), new TableField[] { ReleaseStyle.RELEASE_STYLE.RELEASE_ID }, Keys.RELEASE_PKEY, new TableField[] { Release.RELEASE.ID }, true);
    public static final ForeignKey<ReleaseStyleRecord, StyleRecord> RELEASE_STYLE__FK_RELEASE_STYLE_STYLE_ID_STYLE = Internal.createForeignKey(ReleaseStyle.RELEASE_STYLE, DSL.name("fk_release_style_style_id_style"), new TableField[] { ReleaseStyle.RELEASE_STYLE.STYLE_ID }, Keys.STYLE_PKEY, new TableField[] { Style.STYLE.ID }, true);
    public static final ForeignKey<ReleaseTrackRecord, ReleaseRecord> RELEASE_TRACK__FK_RELEASE_TRACK_RELEASE_ID_RELEASE = Internal.createForeignKey(ReleaseTrack.RELEASE_TRACK, DSL.name("fk_release_track_release_id_release"), new TableField[] { ReleaseTrack.RELEASE_TRACK.RELEASE_ID }, Keys.RELEASE_PKEY, new TableField[] { Release.RELEASE.ID }, true);
    public static final ForeignKey<ReleaseVideoRecord, ReleaseRecord> RELEASE_VIDEO__FK_RELEASE_VIDEO_RELEASE_ID_RELEASE = Internal.createForeignKey(ReleaseVideo.RELEASE_VIDEO, DSL.name("fk_release_video_release_id_release"), new TableField[] { ReleaseVideo.RELEASE_VIDEO.RELEASE_ID }, Keys.RELEASE_PKEY, new TableField[] { Release.RELEASE.ID }, true);
}
