/*
 * This file is generated by jOOQ.
 */
package io.dsub.opendiscogs.jooq.tables;


import io.dsub.opendiscogs.jooq.Keys;
import io.dsub.opendiscogs.jooq.Public;
import io.dsub.opendiscogs.jooq.tables.records.ArtistRecord;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Artist extends TableImpl<ArtistRecord> {

  /**
   * The reference instance of <code>public.artist</code>
   */
  public static final Artist ARTIST = new Artist();
  private static final long serialVersionUID = 1L;
  /**
   * The column <code>public.artist.id</code>.
   */
  public final TableField<ArtistRecord, Integer> ID = createField(DSL.name("id"),
      SQLDataType.INTEGER.nullable(false), this, "");
  /**
   * The column <code>public.artist.data_quality</code>.
   */
  public final TableField<ArtistRecord, String> DATA_QUALITY = createField(DSL.name("data_quality"),
      SQLDataType.VARCHAR(100), this, "");
  /**
   * The column <code>public.artist.name</code>.
   */
  public final TableField<ArtistRecord, String> NAME = createField(DSL.name("name"),
      SQLDataType.VARCHAR(1000), this, "");
  /**
   * The column <code>public.artist.profile</code>.
   */
  public final TableField<ArtistRecord, String> PROFILE = createField(DSL.name("profile"),
      SQLDataType.CLOB, this, "");
  /**
   * The column <code>public.artist.real_name</code>.
   */
  public final TableField<ArtistRecord, String> REAL_NAME = createField(DSL.name("real_name"),
      SQLDataType.VARCHAR(2000), this, "");

  private Artist(Name alias, Table<ArtistRecord> aliased) {
    this(alias, aliased, null);
  }

  private Artist(Name alias, Table<ArtistRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>public.artist</code> table reference
   */
  public Artist(String alias) {
    this(DSL.name(alias), ARTIST);
  }

  /**
   * Create an aliased <code>public.artist</code> table reference
   */
  public Artist(Name alias) {
    this(alias, ARTIST);
  }

  /**
   * Create a <code>public.artist</code> table reference
   */
  public Artist() {
    this(DSL.name("artist"), null);
  }

  public <O extends Record> Artist(Table<O> child, ForeignKey<O, ArtistRecord> key) {
    super(child, key, ARTIST);
  }

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ArtistRecord> getRecordType() {
    return ArtistRecord.class;
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public UniqueKey<ArtistRecord> getPrimaryKey() {
    return Keys.ARTIST_PKEY;
  }

  @Override
  public Artist as(String alias) {
    return new Artist(DSL.name(alias), this);
  }

  @Override
  public Artist as(Name alias) {
    return new Artist(alias, this);
  }

  @Override
  public Artist as(Table<?> alias) {
    return new Artist(alias.getQualifiedName(), this);
  }

  /**
   * Rename this table
   */
  @Override
  public Artist rename(String name) {
    return new Artist(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Artist rename(Name name) {
    return new Artist(name, null);
  }

  /**
   * Rename this table
   */
  @Override
  public Artist rename(Table<?> name) {
    return new Artist(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row5 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row5<Integer, String, String, String, String> fieldsRow() {
    return (Row5) super.fieldsRow();
  }

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
   */
  public <U> SelectField<U> mapping(
      Function5<? super Integer, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
    return convertFrom(Records.mapping(from));
  }

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
   */
  public <U> SelectField<U> mapping(Class<U> toType,
      Function5<? super Integer, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
