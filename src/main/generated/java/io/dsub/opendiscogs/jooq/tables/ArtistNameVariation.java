/*
 * This file is generated by jOOQ.
 */
package io.dsub.opendiscogs.jooq.tables;


import io.dsub.opendiscogs.jooq.Keys;
import io.dsub.opendiscogs.jooq.Public;
import io.dsub.opendiscogs.jooq.tables.records.ArtistNameVariationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArtistNameVariation extends TableImpl<ArtistNameVariationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.artist_name_variation</code>
     */
    public static final ArtistNameVariation ARTIST_NAME_VARIATION = new ArtistNameVariation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArtistNameVariationRecord> getRecordType() {
        return ArtistNameVariationRecord.class;
    }

    /**
     * The column <code>public.artist_name_variation.artist_id</code>.
     */
    public final TableField<ArtistNameVariationRecord, Integer> ARTIST_ID = createField(DSL.name("artist_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.artist_name_variation.name_variation</code>.
     */
    public final TableField<ArtistNameVariationRecord, String> NAME_VARIATION = createField(DSL.name("name_variation"), SQLDataType.VARCHAR(2000).nullable(false), this, "");

    /**
     * The column <code>public.artist_name_variation.name_variation_hash</code>.
     * fnv32 encoded hash from name_variation
     */
    public final TableField<ArtistNameVariationRecord, Long> NAME_VARIATION_HASH = createField(DSL.name("name_variation_hash"), SQLDataType.BIGINT.nullable(false), this, "fnv32 encoded hash from name_variation");

    /**
     * The column <code>public.artist_name_variation.updated_at</code>. created
     * time
     */
    public final TableField<ArtistNameVariationRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "created time");

    private ArtistNameVariation(Name alias, Table<ArtistNameVariationRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArtistNameVariation(Name alias, Table<ArtistNameVariationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.artist_name_variation</code> table
     * reference
     */
    public ArtistNameVariation(String alias) {
        this(DSL.name(alias), ARTIST_NAME_VARIATION);
    }

    /**
     * Create an aliased <code>public.artist_name_variation</code> table
     * reference
     */
    public ArtistNameVariation(Name alias) {
        this(alias, ARTIST_NAME_VARIATION);
    }

    /**
     * Create a <code>public.artist_name_variation</code> table reference
     */
    public ArtistNameVariation() {
        this(DSL.name("artist_name_variation"), null);
    }

    public <O extends Record> ArtistNameVariation(Table<O> child, ForeignKey<O, ArtistNameVariationRecord> key) {
        super(child, key, ARTIST_NAME_VARIATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ArtistNameVariationRecord> getPrimaryKey() {
        return Keys.ARTIST_NAME_VARIATION_PKEY;
    }

    @Override
    public List<ForeignKey<ArtistNameVariationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ARTIST_NAME_VARIATION__FK_ARTIST_NAME_VARIATION_ARTIST_ID_ARTIST);
    }

    private transient Artist _artist;

    /**
     * Get the implicit join path to the <code>public.artist</code> table.
     */
    public Artist artist() {
        if (_artist == null)
            _artist = new Artist(this, Keys.ARTIST_NAME_VARIATION__FK_ARTIST_NAME_VARIATION_ARTIST_ID_ARTIST);

        return _artist;
    }

    @Override
    public ArtistNameVariation as(String alias) {
        return new ArtistNameVariation(DSL.name(alias), this);
    }

    @Override
    public ArtistNameVariation as(Name alias) {
        return new ArtistNameVariation(alias, this);
    }

    @Override
    public ArtistNameVariation as(Table<?> alias) {
        return new ArtistNameVariation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtistNameVariation rename(String name) {
        return new ArtistNameVariation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtistNameVariation rename(Name name) {
        return new ArtistNameVariation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtistNameVariation rename(Table<?> name) {
        return new ArtistNameVariation(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Long, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
