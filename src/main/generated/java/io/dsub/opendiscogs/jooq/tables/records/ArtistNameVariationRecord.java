/*
 * This file is generated by jOOQ.
 */
package io.dsub.opendiscogs.jooq.tables.records;


import io.dsub.opendiscogs.jooq.tables.ArtistNameVariation;
import java.time.LocalDateTime;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ArtistNameVariationRecord extends
    UpdatableRecordImpl<ArtistNameVariationRecord> implements
    Record4<Integer, String, Long, LocalDateTime> {

  private static final long serialVersionUID = 1L;

  /**
   * Create a detached ArtistNameVariationRecord
   */
  public ArtistNameVariationRecord() {
    super(ArtistNameVariation.ARTIST_NAME_VARIATION);
  }

  /**
   * Create a detached, initialised ArtistNameVariationRecord
   */
  public ArtistNameVariationRecord(Integer artistId, String nameVariation, Long nameVariationHash,
      LocalDateTime updatedAt) {
    super(ArtistNameVariation.ARTIST_NAME_VARIATION);

    setArtistId(artistId);
    setNameVariation(nameVariation);
    setNameVariationHash(nameVariationHash);
    setUpdatedAt(updatedAt);
  }

  /**
   * Create a detached, initialised ArtistNameVariationRecord
   */
  public ArtistNameVariationRecord(
      io.dsub.opendiscogs.jooq.tables.pojos.ArtistNameVariation value) {
    super(ArtistNameVariation.ARTIST_NAME_VARIATION);

    if (value != null) {
      setArtistId(value.getArtistId());
      setNameVariation(value.getNameVariation());
      setNameVariationHash(value.getNameVariationHash());
      setUpdatedAt(value.getUpdatedAt());
    }
  }

  /**
   * Getter for <code>public.artist_name_variation.artist_id</code>.
   */
  public Integer getArtistId() {
    return (Integer) get(0);
  }

  /**
   * Setter for <code>public.artist_name_variation.artist_id</code>.
   */
  public ArtistNameVariationRecord setArtistId(Integer value) {
    set(0, value);
    return this;
  }

  /**
   * Getter for <code>public.artist_name_variation.name_variation</code>.
   */
  public String getNameVariation() {
    return (String) get(1);
  }

  /**
   * Setter for <code>public.artist_name_variation.name_variation</code>.
   */
  public ArtistNameVariationRecord setNameVariation(String value) {
    set(1, value);
    return this;
  }

  /**
   * Getter for <code>public.artist_name_variation.name_variation_hash</code>. fnv32 encoded hash
   * from name_variation
   */
  public Long getNameVariationHash() {
    return (Long) get(2);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  /**
   * Setter for <code>public.artist_name_variation.name_variation_hash</code>. fnv32 encoded hash
   * from name_variation
   */
  public ArtistNameVariationRecord setNameVariationHash(Long value) {
    set(2, value);
    return this;
  }

  // -------------------------------------------------------------------------
  // Record4 type implementation
  // -------------------------------------------------------------------------

  /**
   * Getter for <code>public.artist_name_variation.updated_at</code>. created time
   */
  public LocalDateTime getUpdatedAt() {
    return (LocalDateTime) get(3);
  }

  /**
   * Setter for <code>public.artist_name_variation.updated_at</code>. created time
   */
  public ArtistNameVariationRecord setUpdatedAt(LocalDateTime value) {
    set(3, value);
    return this;
  }

  @Override
  public Record2<Integer, Long> key() {
    return (Record2) super.key();
  }

  @Override
  public Row4<Integer, String, Long, LocalDateTime> fieldsRow() {
    return (Row4) super.fieldsRow();
  }

  @Override
  public Row4<Integer, String, Long, LocalDateTime> valuesRow() {
    return (Row4) super.valuesRow();
  }

  @Override
  public Field<Integer> field1() {
    return ArtistNameVariation.ARTIST_NAME_VARIATION.ARTIST_ID;
  }

  @Override
  public Field<String> field2() {
    return ArtistNameVariation.ARTIST_NAME_VARIATION.NAME_VARIATION;
  }

  @Override
  public Field<Long> field3() {
    return ArtistNameVariation.ARTIST_NAME_VARIATION.NAME_VARIATION_HASH;
  }

  @Override
  public Field<LocalDateTime> field4() {
    return ArtistNameVariation.ARTIST_NAME_VARIATION.UPDATED_AT;
  }

  @Override
  public Integer component1() {
    return getArtistId();
  }

  @Override
  public String component2() {
    return getNameVariation();
  }

  @Override
  public Long component3() {
    return getNameVariationHash();
  }

  @Override
  public LocalDateTime component4() {
    return getUpdatedAt();
  }

  @Override
  public Integer value1() {
    return getArtistId();
  }

  @Override
  public String value2() {
    return getNameVariation();
  }

  @Override
  public Long value3() {
    return getNameVariationHash();
  }

  @Override
  public LocalDateTime value4() {
    return getUpdatedAt();
  }

  @Override
  public ArtistNameVariationRecord value1(Integer value) {
    setArtistId(value);
    return this;
  }

  @Override
  public ArtistNameVariationRecord value2(String value) {
    setNameVariation(value);
    return this;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  @Override
  public ArtistNameVariationRecord value3(Long value) {
    setNameVariationHash(value);
    return this;
  }

  @Override
  public ArtistNameVariationRecord value4(LocalDateTime value) {
    setUpdatedAt(value);
    return this;
  }

  @Override
  public ArtistNameVariationRecord values(Integer value1, String value2, Long value3,
      LocalDateTime value4) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    return this;
  }
}
