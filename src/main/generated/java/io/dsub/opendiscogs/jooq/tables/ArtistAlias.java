/*
 * This file is generated by jOOQ.
 */
package io.dsub.opendiscogs.jooq.tables;


import io.dsub.opendiscogs.jooq.Keys;
import io.dsub.opendiscogs.jooq.Public;
import io.dsub.opendiscogs.jooq.tables.records.ArtistAliasRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArtistAlias extends TableImpl<ArtistAliasRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.artist_alias</code>
     */
    public static final ArtistAlias ARTIST_ALIAS = new ArtistAlias();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArtistAliasRecord> getRecordType() {
        return ArtistAliasRecord.class;
    }

    /**
     * The column <code>public.artist_alias.artist_id</code>.
     */
    public final TableField<ArtistAliasRecord, Integer> ARTIST_ID = createField(DSL.name("artist_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.artist_alias.alias_id</code>.
     */
    public final TableField<ArtistAliasRecord, Integer> ALIAS_ID = createField(DSL.name("alias_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.artist_alias.updated_at</code>. created time
     */
    public final TableField<ArtistAliasRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "created time");

    private ArtistAlias(Name alias, Table<ArtistAliasRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArtistAlias(Name alias, Table<ArtistAliasRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.artist_alias</code> table reference
     */
    public ArtistAlias(String alias) {
        this(DSL.name(alias), ARTIST_ALIAS);
    }

    /**
     * Create an aliased <code>public.artist_alias</code> table reference
     */
    public ArtistAlias(Name alias) {
        this(alias, ARTIST_ALIAS);
    }

    /**
     * Create a <code>public.artist_alias</code> table reference
     */
    public ArtistAlias() {
        this(DSL.name("artist_alias"), null);
    }

    public <O extends Record> ArtistAlias(Table<O> child, ForeignKey<O, ArtistAliasRecord> key) {
        super(child, key, ARTIST_ALIAS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ArtistAliasRecord> getPrimaryKey() {
        return Keys.ARTIST_ALIAS_PKEY;
    }

    @Override
    public List<ForeignKey<ArtistAliasRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ARTIST_ALIAS__FK_ARTIST_ALIAS_ARTIST_ID_ARTIST, Keys.ARTIST_ALIAS__FK_ARTIST_ALIAS_ALIAS_ID_ARTIST);
    }

    private transient Artist _fkArtistAliasArtistIdArtist;
    private transient Artist _fkArtistAliasAliasIdArtist;

    /**
     * Get the implicit join path to the <code>public.artist</code> table, via
     * the <code>fk_artist_alias_artist_id_artist</code> key.
     */
    public Artist fkArtistAliasArtistIdArtist() {
        if (_fkArtistAliasArtistIdArtist == null)
            _fkArtistAliasArtistIdArtist = new Artist(this, Keys.ARTIST_ALIAS__FK_ARTIST_ALIAS_ARTIST_ID_ARTIST);

        return _fkArtistAliasArtistIdArtist;
    }

    /**
     * Get the implicit join path to the <code>public.artist</code> table, via
     * the <code>fk_artist_alias_alias_id_artist</code> key.
     */
    public Artist fkArtistAliasAliasIdArtist() {
        if (_fkArtistAliasAliasIdArtist == null)
            _fkArtistAliasAliasIdArtist = new Artist(this, Keys.ARTIST_ALIAS__FK_ARTIST_ALIAS_ALIAS_ID_ARTIST);

        return _fkArtistAliasAliasIdArtist;
    }

    @Override
    public ArtistAlias as(String alias) {
        return new ArtistAlias(DSL.name(alias), this);
    }

    @Override
    public ArtistAlias as(Name alias) {
        return new ArtistAlias(alias, this);
    }

    @Override
    public ArtistAlias as(Table<?> alias) {
        return new ArtistAlias(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtistAlias rename(String name) {
        return new ArtistAlias(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtistAlias rename(Name name) {
        return new ArtistAlias(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtistAlias rename(Table<?> name) {
        return new ArtistAlias(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
